/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cafeinventory;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Fely
 */
public class Home extends javax.swing.JFrame {

    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        AddBtn = new javax.swing.JButton();
        ProdType_cb = new javax.swing.JComboBox<>();
        ProdBrand_tf = new javax.swing.JTextField();
        ProdQty_tf = new javax.swing.JTextField();
        ProdCost_tf = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        orderBtn = new javax.swing.JButton();
        CoffeeQty = new javax.swing.JTextField();
        CoffeeType_cb = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        ProdInvTb = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        ProdLogTb = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(232, 213, 165));

        jLabel2.setFont(new java.awt.Font("Bahnschrift", 1, 18)); // NOI18N
        jLabel2.setText("Brand :");

        jLabel3.setFont(new java.awt.Font("Bahnschrift", 1, 18)); // NOI18N
        jLabel3.setText("Type :");

        jLabel4.setFont(new java.awt.Font("Bahnschrift", 1, 18)); // NOI18N
        jLabel4.setText("Quantity : ");

        jLabel6.setFont(new java.awt.Font("Bahnschrift", 1, 22)); // NOI18N
        jLabel6.setText("Add Product");

        jLabel7.setFont(new java.awt.Font("Bahnschrift", 1, 18)); // NOI18N
        jLabel7.setText("Cost :");

        AddBtn.setFont(new java.awt.Font("Bahnschrift", 1, 18)); // NOI18N
        AddBtn.setText("ADD");
        AddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnActionPerformed(evt);
            }
        });

        ProdType_cb.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        ProdType_cb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sugar", "Creamer", "CoffeeBeans" }));
        ProdType_cb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdType_cbActionPerformed(evt);
            }
        });

        ProdBrand_tf.setFont(new java.awt.Font("Bahnschrift", 0, 18)); // NOI18N
        ProdBrand_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdBrand_tfActionPerformed(evt);
            }
        });

        ProdQty_tf.setFont(new java.awt.Font("Bahnschrift", 0, 18)); // NOI18N
        ProdQty_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdQty_tfActionPerformed(evt);
            }
        });

        ProdCost_tf.setFont(new java.awt.Font("Bahnschrift", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ProdCost_tf))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ProdQty_tf))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ProdType_cb, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ProdBrand_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(AddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ProdType_cb, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ProdBrand_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(ProdQty_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(ProdCost_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Bahnschrift", 1, 22)); // NOI18N
        jLabel1.setText("Make Coffee");

        jLabel5.setFont(new java.awt.Font("Bahnschrift", 1, 18)); // NOI18N
        jLabel5.setText("Quantity :");

        jLabel8.setFont(new java.awt.Font("Bahnschrift", 1, 18)); // NOI18N
        jLabel8.setText("Coffee Type :");

        orderBtn.setFont(new java.awt.Font("Bahnschrift", 1, 18)); // NOI18N
        orderBtn.setText("ORDER");
        orderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderBtnActionPerformed(evt);
            }
        });

        CoffeeQty.setFont(new java.awt.Font("Bahnschrift", 0, 18)); // NOI18N
        CoffeeQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CoffeeQtyActionPerformed(evt);
            }
        });

        CoffeeType_cb.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        CoffeeType_cb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Black", "Latte", "Cappuccino", "Americano", "Espresso", "Irish" }));
        CoffeeType_cb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CoffeeType_cbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(orderBtn)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CoffeeType_cb, 0, 97, Short.MAX_VALUE)
                    .addComponent(CoffeeQty))
                .addGap(60, 60, 60))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(118, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(CoffeeType_cb, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(CoffeeQty, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(orderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(64, 64, 64)
                    .addComponent(jLabel8)
                    .addContainerGap(87, Short.MAX_VALUE)))
        );

        ProdInvTb.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        ProdInvTb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "Quantity", "Cost", "Status"
            }
        ));
        ProdInvTb.setIntercellSpacing(new java.awt.Dimension(0, 0));
        ProdInvTb.setRowHeight(25);
        jScrollPane1.setViewportView(ProdInvTb);

        ProdLogTb.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        ProdLogTb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "Brand", "Quantity", "Cost", "Date Added"
            }
        ));
        ProdLogTb.setRowHeight(25);
        jScrollPane2.setViewportView(ProdLogTb);

        jLabel9.setFont(new java.awt.Font("Bahnschrift", 1, 24)); // NOI18N
        jLabel9.setText("Product Log Table");

        jLabel10.setFont(new java.awt.Font("Bahnschrift", 1, 24)); // NOI18N
        jLabel10.setText("Product Inventory Table");

        jLabel11.setFont(new java.awt.Font("Bahnschrift", 1, 24)); // NOI18N
        jLabel11.setText("X");
        jLabel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel11MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 278, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addContainerGap(35, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(75, 75, 75)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(99, 99, 99))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel10)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /* Black - (2)sugar,(0)creamer,(6)cbeans
        Latte - (5)sugar,(3)creamer),(3)cbeans
        Cappuccino - (3)sugar,(6)creamer,(2)cbeans
        Americano - (5)sugar,(2)creamer,(8)cbeans
        Espresso - (5)sugar,(5)creamer,(5)cbeans
        Irish - (4)sugar,(1)creamer,(8)cbeans
    */
    private void orderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderBtnActionPerformed
        if(CoffeeQty.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please fill up all the fields");
        }
        else
        {
            String coffeeType = CoffeeType_cb.getSelectedItem().toString();
            String coffeeQty = CoffeeQty.getText();
            int deductSugar = 0, deductCreamer = 0, deductCBeans = 0;
            
            File stockFile = new File("stockTable.txt");
            
            try
            {
                FileReader fr = new FileReader(stockFile);
                BufferedReader br = new BufferedReader(fr);
                FileWriter writerStock = new FileWriter(stockFile, true);
                
                Object[] lines = br.lines().toArray();
                
                int coffeeQty_int = Integer.parseInt(coffeeQty);
                
                
                if(coffeeType.equalsIgnoreCase("Black"))
                {
                    deductSugar = 2 * coffeeQty_int;
                    deductCreamer = 0 * coffeeQty_int;
                    deductCBeans = 6 * coffeeQty_int;
                    
                    int[] newQtys = {deductSugar,deductCreamer,deductCBeans};
                    String[] names = {"Sugar","Creamer","CoffeeBeans"};
                    boolean error = false;
                    
                    for(int i = 0 ; i< lines.length; i++)
                    {
                        String[] currentLine = lines[i].toString().split(" ");
                        int newQty = Integer.parseInt(currentLine[1]) - newQtys[i];
                        if(newQty < 0){
                            error = true;
                            break;
                        }
                        String status = "";
                        if(newQty <= 5) status = "LOW";
                         else if (5 < newQty && newQty < 50) status = "Sufficient";
                         else status = "FULL";
                        lines[i] = names[i] + " " + Integer.toString(newQty) + " " + currentLine[2] + " " + status;
                    }
                    if(!error)
                        JOptionPane.showMessageDialog(null,"Enjoy your Black coffee!\nNote: (2) * Sugar,\n(0) * Creamer,\n(6) * Coffee Beans \nwere taken from the inventory.");
                    else
                        JOptionPane.showMessageDialog(null,"Error: Not enough supply of ingredients to make Black Coffee!");
                }
                else if(coffeeType.equalsIgnoreCase("Latte"))
                {
                    deductSugar = 5 * coffeeQty_int;
                    deductCreamer = 3 * coffeeQty_int;
                    deductCBeans = 3 * coffeeQty_int;
                    
                    int[] newQtys = {deductSugar,deductCreamer,deductCBeans};
                    String[] names = {"Sugar","Creamer","CoffeeBeans"};
                    boolean error = false;
                    
                    for(int i = 0 ; i< lines.length; i++)
                    {
                        String[] currentLine = lines[i].toString().split(" ");
                        int newQty = Integer.parseInt(currentLine[1]) - newQtys[i];
                        if(newQty < 0){
                            error = true;
                            break;
                        }
                        String status = "";
                        if(newQty <= 5) status = "LOW";
                         else if (5 < newQty && newQty < 50) status = "Sufficient";
                         else status = "FULL";
                        lines[i] = names[i] + " " + Integer.toString(newQty) + " " + currentLine[2] + " " + status;
                    }
                    if(!error)
                        JOptionPane.showMessageDialog(null,"Enjoy your Latte coffee!\nNote: (5) * Sugar,\n(3) * Creamer,\n(3) * Coffee Beans \nwere taken from the inventory.");
                    else
                        JOptionPane.showMessageDialog(null,"Error: Not enough supply of ingredients to make Latte Coffee!");
                }
                else if(coffeeType.equalsIgnoreCase("Cappuccino"))
                {
                    deductSugar = 3 * coffeeQty_int;
                    deductCreamer = 6 * coffeeQty_int;
                    deductCBeans = 2 * coffeeQty_int;
                    
                    int[] newQtys = {deductSugar,deductCreamer,deductCBeans};
                    String[] names = {"Sugar","Creamer","CoffeeBeans"};
                    boolean error = false;
                    
                    for(int i = 0 ; i< lines.length; i++)
                    {
                        String[] currentLine = lines[i].toString().split(" ");
                        int newQty = Integer.parseInt(currentLine[1]) - newQtys[i];
                        if(newQty < 0){
                            error = true;
                            break;
                        }
                        String status = "";
                        if(newQty <= 5) status = "LOW";
                         else if (5 < newQty && newQty < 50) status = "Sufficient";
                         else status = "FULL";
                        lines[i] = names[i] + " " + Integer.toString(newQty) + " " + currentLine[2] + " " + status;
                    }
                    if(!error)
                        JOptionPane.showMessageDialog(null,"Enjoy your Cappuccino coffee!\nNote: (3) * Sugar,\n(6) * Creamer,\n(2) * Coffee Beans \nwere taken from the inventory.");
                    else
                        JOptionPane.showMessageDialog(null,"Error: Not enough supply of ingredients to make Cappuccino Coffee!");
                }
                else if(coffeeType.equalsIgnoreCase("Americano"))
                {
                    deductSugar = 5 * coffeeQty_int;
                    deductCreamer = 2 * coffeeQty_int;
                    deductCBeans = 8 * coffeeQty_int;
                    
                    int[] newQtys = {deductSugar,deductCreamer,deductCBeans};
                    String[] names = {"Sugar","Creamer","CoffeeBeans"};
                    boolean error = false;
                    
                    for(int i = 0 ; i< lines.length; i++)
                    {
                        String[] currentLine = lines[i].toString().split(" ");
                        int newQty = Integer.parseInt(currentLine[1]) - newQtys[i];
                        if(newQty < 0){
                            error = true;
                            break;
                        }
                        String status = "";
                        if(newQty <= 5) status = "LOW";
                         else if (5 < newQty && newQty < 50) status = "Sufficient";
                         else status = "FULL";
                        lines[i] = names[i] + " " + Integer.toString(newQty) + " " + currentLine[2] + " " + status;
                    }
                    if(!error)
                        JOptionPane.showMessageDialog(null,"Enjoy your Americano coffee!\nNote: (5) * Sugar,\n(2) * Creamer,\n(8) * Coffee Beans \nwere taken from the inventory.");
                    else
                        JOptionPane.showMessageDialog(null,"Error: Not enough supply of ingredients to make Cappuccino Coffee!");
                }
                else if(coffeeType.equalsIgnoreCase("Espresso"))
                {
                    deductSugar = 5 * coffeeQty_int;
                    deductCreamer = 5 * coffeeQty_int;
                    deductCBeans = 5 * coffeeQty_int;
                    
                    int[] newQtys = {deductSugar,deductCreamer,deductCBeans};
                    String[] names = {"Sugar","Creamer","CoffeeBeans"};
                    boolean error = false;
                    
                    for(int i = 0 ; i< lines.length; i++)
                    {
                        String[] currentLine = lines[i].toString().split(" ");
                        int newQty = Integer.parseInt(currentLine[1]) - newQtys[i];
                        if(newQty < 0){
                            error = true;
                            break;
                        }
                        String status = "";
                        if(newQty <= 5) status = "LOW";
                         else if (5 < newQty && newQty < 50) status = "Sufficient";
                         else status = "FULL";
                        lines[i] = names[i] + " " + Integer.toString(newQty) + " " + currentLine[2] + " " + status;
                    }
                    if(!error)
                        JOptionPane.showMessageDialog(null,"Enjoy your Espresso coffee!\nNote: (5) * Sugar,\n(5) * Creamer,\n(5) * Coffee Beans \nwere taken from the inventory.");
                    else
                        JOptionPane.showMessageDialog(null,"Error: Not enough supply of ingredients to make Espresso Coffee!");
                }
                else if(coffeeType.equalsIgnoreCase("Irish"))
                {
                    deductSugar = 4 * coffeeQty_int;
                    deductCreamer = 1 * coffeeQty_int;
                    deductCBeans = 8 * coffeeQty_int;
                    
                    int[] newQtys = {deductSugar,deductCreamer,deductCBeans};
                    String[] names = {"Sugar","Creamer","CoffeeBeans"};
                    boolean error = false;
                    
                    for(int i = 0 ; i< lines.length; i++)
                    {
                        String[] currentLine = lines[i].toString().split(" ");
                        int newQty = Integer.parseInt(currentLine[1]) - newQtys[i];
                        if(newQty < 0){
                            error = true;
                            break;
                        }
                        String status = "";
                        if(newQty <= 5) status = "LOW";
                         else if (5 < newQty && newQty < 50) status = "Sufficient";
                         else status = "FULL";
                        lines[i] = names[i] + " " + Integer.toString(newQty) + " " + currentLine[2] + " " + status;
                    }
                    if(!error)
                        JOptionPane.showMessageDialog(null,"Enjoy your Irish coffee!\nNote: (4) * Sugar,\n(1) * Creamer,\n(8) * Coffee Beans \nwere taken from the inventory.");
                    else
                        JOptionPane.showMessageDialog(null,"Error: Not enough supply of ingredients to make Irish Coffee!");
                }
                PrintWriter emWriter = new PrintWriter(stockFile);
                emWriter.print("");
                emWriter.close();
                
                for(int i = 0; i< lines.length; i++)
                {
                    writerStock.write(lines[i].toString());
                    writerStock.write(System.getProperty("line.separator"));
                } 
                writerStock.close();
                FileReader fr1 = new FileReader(stockFile);
                BufferedReader br1 = new BufferedReader(fr1);
                
                DefaultTableModel model1 = (DefaultTableModel)ProdInvTb.getModel();
                Object[] lines1 = br1.lines().toArray();
                
                //reset rows
                for(int i = model1.getRowCount() - 1; i >= 0; i--)
                    model1.removeRow(i);
                
                for(int i = 0; i< lines1.length; i++)
                {
                    String[] row = lines1[i].toString().split(" ");
                    model1.addRow(row);
                } 
                CoffeeQty.setText(null);

            }
             catch (NumberFormatException nfe)
            {
                JOptionPane.showMessageDialog(null,"Error: Please enter numeric value at 'Quantity' !");
            }
            catch (Exception e)
            {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null,"Error occured!");
            }

            
        }
    }//GEN-LAST:event_orderBtnActionPerformed

    private void AddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnActionPerformed
        if(ProdBrand_tf.getText().isEmpty() || ProdQty_tf.getText().isEmpty() || ProdCost_tf.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Error: Please fill up all the fields");
        }
        else
        {

            String prodType = ProdType_cb.getSelectedItem().toString();
            String prodBrand = ProdBrand_tf.getText();
            String prodQty = ProdQty_tf.getText();
            String prodCost = ProdCost_tf.getText();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
            Date date = new Date();
            File file = new File("prodlogtable.txt");
            File stockFile = new File("stockTable.txt");
            
            try
            {
                FileReader fr = new FileReader(stockFile);
                BufferedReader br = new BufferedReader(fr);
                
                Object[] lines = br.lines().toArray();
                int prodQty_int = Integer.parseInt(prodQty);
                double prodCost_db =Double.parseDouble(prodCost) ;
                
                FileWriter writer = new FileWriter(file, true);
                FileWriter writerStock = new FileWriter(stockFile, true);
                writer.write("" + prodType + " " + prodBrand + " " + Integer.toString(prodQty_int) + " " + Double.toString(prodCost_db) + " " + sdf.format(date));
                writer.write(System.getProperty("line.separator"));
                writer.close();

                if(prodType.equalsIgnoreCase("Sugar"))
                {
                    String[] sugarLine = lines[0].toString().split(" ");
                    int newQty = Integer.parseInt(sugarLine[1]) + Integer.parseInt(prodQty);
                    double newCost = Double.parseDouble(sugarLine[2]) + Double.parseDouble(prodCost);
                    String status = " ";
                    if(newQty <= 5) status = "LOW";
                    else if (5 < newQty && newQty < 50) status = "Sufficient";
                    else status = "FULL";
                    
                    lines[0] = "Sugar" + " " + Integer.toString(newQty) + " " + Double.toString(newCost) + " " + status;
                }
                else if(prodType.equalsIgnoreCase("Creamer"))
                {
                    String[] creamerLine = lines[1].toString().split(" ");
                    int newQty = Integer.parseInt(creamerLine[1]) + Integer.parseInt(prodQty);
                    double newCost = Double.parseDouble(creamerLine[2]) + Double.parseDouble(prodCost);
                    String status = " ";
                    if(newQty <= 5) status = "LOW";
                    else if (5 < newQty && newQty < 50) status = "Sufficient";
                    else status = "FULL";
                    
                    lines[1] = "Creamer" + " " + Integer.toString(newQty) + " " + Double.toString(newCost) + " " + status;
                }
                else if(prodType.equalsIgnoreCase("CoffeeBeans"))
                {
                    String[] beansLine = lines[2].toString().split(" ");
                    int newQty = Integer.parseInt(beansLine[1]) + Integer.parseInt(prodQty);
                    double newCost = Double.parseDouble(beansLine[2]) + Double.parseDouble(prodCost);
                    String status = " ";
                    if(newQty <= 5) status = "LOW";
                    else if (5 < newQty && newQty < 50) status = "Sufficient";
                    else status = "FULL";
                    lines[2] = "CoffeeBeans" + " " + Integer.toString(newQty) + " " + Double.toString(newCost) + " " + status;
                }
                
                //to empty file
                PrintWriter emWriter = new PrintWriter(stockFile);
                emWriter.print("");
                emWriter.close();
                
                for(int i = 0; i< lines.length; i++)
                {
                    writerStock.write(lines[i].toString());
                    writerStock.write(System.getProperty("line.separator"));
                } 
                writerStock.close();
                JOptionPane.showMessageDialog(null,"Product successfully added!");
            } 
            catch (NumberFormatException nfe)
            {
                JOptionPane.showMessageDialog(null,"Error: Please enter numeric values at 'Quantity' or 'Cost' !");
            }
            catch (Exception e)
            {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null,"Error occured!");
            }
            
            try {
                FileReader fr = new FileReader(file);
                BufferedReader br = new BufferedReader(fr);
                
                DefaultTableModel model = (DefaultTableModel)ProdLogTb.getModel();
                Object[] lines = br.lines().toArray();
                      
                FileReader fr1 = new FileReader(stockFile);
                BufferedReader br1 = new BufferedReader(fr1);
                
                DefaultTableModel model1 = (DefaultTableModel)ProdInvTb.getModel();
                Object[] lines1 = br1.lines().toArray();
                
                //reset rows
                for(int i = model1.getRowCount() - 1; i >= 0; i--)
                    model1.removeRow(i);
                
                for(int i = 0; i< lines1.length; i++)
                {
                    String[] row = lines1[i].toString().split(" ");
                    model1.addRow(row);
                } 
                
                //reset rows
                for(int i = model.getRowCount() - 1; i >= 0; i--)
                    model.removeRow(i);
                
                for(int i = 0; i< lines.length; i++)
                {
                    String[] row = lines[i].toString().split(" ");
                    model.addRow(row);
                }   
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            ProdBrand_tf.setText(null);
            ProdQty_tf.setText(null);
            ProdCost_tf.setText(null);
            
            
        }
    }//GEN-LAST:event_AddBtnActionPerformed

    private void ProdType_cbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdType_cbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProdType_cbActionPerformed

    private void CoffeeType_cbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CoffeeType_cbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CoffeeType_cbActionPerformed

    private void ProdBrand_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdBrand_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProdBrand_tfActionPerformed

    private void CoffeeQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CoffeeQtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CoffeeQtyActionPerformed

    private void ProdQty_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdQty_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProdQty_tfActionPerformed

    private void jLabel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabel11MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBtn;
    private javax.swing.JTextField CoffeeQty;
    private javax.swing.JComboBox<String> CoffeeType_cb;
    private javax.swing.JTextField ProdBrand_tf;
    private javax.swing.JTextField ProdCost_tf;
    private javax.swing.JTable ProdInvTb;
    private javax.swing.JTable ProdLogTb;
    private javax.swing.JTextField ProdQty_tf;
    private javax.swing.JComboBox<String> ProdType_cb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton orderBtn;
    // End of variables declaration//GEN-END:variables
}
